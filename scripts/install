#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# INITIALIZE AND STORE SETTINGS
#=================================================

web_api_password=$(ynh_string_random --length=32 | base64 -w 0 | rev | cut -b 2- | rev | tr -d '\n+/')
crypto_random=$(ynh_string_random --length=32 | base64 -w 0 | rev | cut -b 2- | rev | tr -d '\n+/')
admin_mail=$(ynh_user_get_info --username=$admin --key=mail)

ynh_app_setting_set --key=crypto_random --value=$crypto_random
ynh_app_setting_set --key=web_api_password --value=$web_api_password

# key for the .env __JWT_KEY__
jwt_key=$(ynh_string_random --length=45 | base64)
ynh_app_setting_set --key=jwt_key --value=$jwt_key

# Retrieve YunoHost main domain for mails to work
main_domain=$(cat /etc/yunohost/current_host)
ynh_app_setting_set --key=main_domain --value=$main_domain

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_nodejs_install
ynh_install_mongo

#=================================================
# CREATE A MONGODB DATABASE
#=================================================
ynh_script_progression "Creating a MongoDB database..."

db_name=$(ynh_sanitize_dbid --db_name=$app)
db_user=$db_name
ynh_app_setting_set --key=db_name --value=$db_name
ynh_mongo_setup_db --db_user=$db_user --db_name=$db_name

if ynh_hide_warnings ynh_mongo_exec --command="printjson(rs.status())" | grep -q "not running with --replSet"; then
	ynh_systemctl --service=mongod --action=stop --wait_until="Shutting down" --log_path="/var/log/mongodb/mongod.log"
	ynh_replace --match="#replication:" --replace="replication:\n  replSetName: $app" --file="/etc/mongod.conf"
	ynh_systemctl --service=mongod --action=start --wait_until="aiting for connections" --log_path="/var/log/mongodb/mongod.log"
	ynh_mongo_exec --command="rs.initiate()"
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Setting up source files..."

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$install_dir/build"

mkdir -p "$install_dir/tmp"
mkdir -p $install_dir/tmp/{projectHistories,dumpFolder,uploads}
mkdir -p "$install_dir/config"
mkdir -p "$install_dir/live"

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R $app:www-data "$install_dir"

#=================================================
# APP INITIAL CONFIGURATION
#=================================================
ynh_script_progression "Adding $app's configuration files..."

ynh_config_add --template="variables.env" --destination="$install_dir/variables.env"
chmod 400 "$install_dir/variables.env"
chown $app:$app "$install_dir/variables.env"

ynh_config_add --template="settings.js" --destination="$install_dir/settings.js"
chmod 400 "$install_dir/settings.js"
chown $app:$app "$install_dir/settings.js"

#=================================================
# BUILDING APP
#=================================================
ynh_script_progression "Preparing app..."

ynh_exec_as_app cp "$install_dir/build/server-ce/genScript.js" "$install_dir/live/genScript.js"
ynh_exec_as_app cp "$install_dir/build/server-ce/services.js" "$install_dir/live/services.js"
ynh_exec_as_app cp "$install_dir/build/package.json" "$install_dir/live/package.json"
ynh_exec_as_app cp "$install_dir/build/package-lock.json" "$install_dir/live/package-lock.json"
ynh_exec_as_app cp -r "$install_dir/build/libraries/" "$install_dir/live/libraries/"
ynh_exec_as_app cp -r "$install_dir/build/services/" "$install_dir/live/services/"
ynh_exec_as_app cp -r "$install_dir/build/patches/" "$install_dir/live/patches/"
ynh_exec_as_app cp -r "$install_dir/build/server-ce/config/" "$install_dir/config/"

chown -R $app:www-data "$install_dir/config"

ynh_safe_rm "$install_dir/config/settings.js"

ynh_safe_rm "$install_dir/config/production.json"
ynh_config_add --template="production.json" --destination="$install_dir/config/production.json"
chmod 400 "$install_dir/config/production.json"
chown $app:$app "$install_dir/config/production.json"

ynh_safe_rm "$install_dir/live/services/history-v1/config/production.json"
ynh_config_add --template="production.json" --destination="$install_dir/live/services/history-v1/config/production.json"
chmod 400 "$install_dir/live/services/history-v1/config/production.json"
chown $app:$app "$install_dir/live/services/history-v1/config/production.json"

ynh_exec_as_app cp "$install_dir/build/server-ce/config/custom-environment-variables.json" "$install_dir/live/services/history-v1/config/"

#remove build dir
ynh_safe_rm "$install_dir/build"

ynh_script_progression "Building app... This may take a LOT of time depending of your CPU"
pushd "$install_dir/live"
	export CYPRESS_INSTALL_BINARY=0
	ynh_hide_warnings ynh_exec_as_app npm install --ommit=dev
	ynh_hide_warnings ynh_exec_as_app npm cache clean --force
popd

pushd "$install_dir/live/services/web"
	export CYPRESS_INSTALL_BINARY=0
	ynh_hide_warnings ynh_exec_as_app npm install --include=dev
	ynh_hide_warnings ynh_exec_as_app NODE_OPTIONS="--max-old-space-size=3000" npm run webpack:production
	ynh_hide_warnings ynh_exec_as_app npm install --omit=dev
	ynh_hide_warnings ynh_exec_as_app npm run precompile-pug
popd

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R $app:www-data "$install_dir"

du -h --max-depth=1 "$install_dir"

#=================================================
# SYSTEM CONFIGURATION
#=================================================
ynh_script_progression "Adding system configurations related to $app..."

# Create a dedicated NGINX config using the conf/nginx.conf template
ynh_config_add_nginx

# Create a dedicated systemd config
ynh_config_add_systemd --service="$app-chat" --template="overleaf-chat.service"
yunohost service add "$app-chat" --log="/var/log/$app/chat.log"

ynh_config_add_systemd --service="$app-clsi" --template="overleaf-clsi.service"
yunohost service add "$app-clsi" --log="/var/log/$app/clsi.log"

ynh_config_add_systemd --service="$app-contacts" --template="overleaf-contacts.service"
yunohost service add "$app-contacts" --log="/var/log/$app/contacts.log"

ynh_config_add_systemd --service="$app-docstore" --template="overleaf-docstore.service"
yunohost service add "$app-docstore" --log="/var/log/$app/docstore.log"

ynh_config_add_systemd --service="$app-document-updater" --template="overleaf-document-updater.service"
yunohost service add "$app-document-updater" --log="/var/log/$app/document-updater.log"

ynh_config_add_systemd --service="$app-filestore" --template="overleaf-filestore.service"
yunohost service add "$app-filestore" --log="/var/log/$app/filestore.log"

ynh_config_add_systemd --service="$app-history-v1" --template="overleaf-history-v1.service"
yunohost service add "$app-history-v1" --log="/var/log/$app/history-v1.log"

ynh_config_add_systemd --service="$app-notifications" --template="overleaf-notifications.service"
yunohost service add "$app-notifications" --log="/var/log/$app/notifications.log"

ynh_config_add_systemd --service="$app-project-history" --template="overleaf-project-history.service"
yunohost service add "$app-project-history" --log="/var/log/$app/project-history.log"

ynh_config_add_systemd --service="$app-real-time" --template="overleaf-real-time.service"
yunohost service add "$app-real-time" --log="/var/log/$app/real-time.log"

ynh_config_add_systemd --service="$app-web" --template="overleaf-web.service"
yunohost service add "$app-web" --log="/var/log/$app/web.log"

mkdir -p "/var/log/$app"
chown -R $app:$app "/var/log/$app"
# Use logrotate to manage application logfile(s)
ynh_config_add_logrotate

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

ynh_systemctl --service="$app-chat" --action="start" --log_path="/var/log/$app/chat.log" --wait_until="Using settings from"
ynh_systemctl --service="$app-clsi" --action="start" --log_path="/var/log/$app/clsi.log" --wait_until="Using settings from"
ynh_systemctl --service="$app-contacts" --action="start" --log_path="/var/log/$app/contacts.log" --wait_until="Using settings from"
ynh_systemctl --service="$app-docstore" --action="start" --log_path="/var/log/$app/docstore.log" --wait_until="Using settings from"
ynh_systemctl --service="$app-document-updater" --action="start" --log_path="/var/log/$app/document-updater.log" --wait_until="Using settings from"
ynh_systemctl --service="$app-filestore" --action="start" --log_path="/var/log/$app/filestore.log" --wait_until="Using settings from"
ynh_systemctl --service="$app-history-v1" --action="start" --log_path="/var/log/$app/history-v1.log" --wait_until="Loading backend"
ynh_systemctl --service="$app-notifications" --action="start" --log_path="/var/log/$app/notifications.log" --wait_until="Using settings from"
ynh_systemctl --service="$app-project-history" --action="start" --log_path="/var/log/$app/project-history.log" --wait_until="Using settings from"
ynh_systemctl --service="$app-real-time" --action="start" --log_path="/var/log/$app/real-time.log" --wait_until="Using settings from"
ynh_systemctl --service="$app-web" --action="start" --log_path="/var/log/$app/web.log" --wait_until="listening on" --wait_until="Using settings from"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Installation of $app completed"
